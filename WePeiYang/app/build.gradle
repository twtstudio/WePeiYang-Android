apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.antfortune.freeline'

Properties pro = new Properties()
pro.load(project.rootProject.file('local.properties').newDataInputStream())
print(pro.getProperty("keyAlias"))

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.1"
    defaultConfig {
        applicationId "com.twt.service"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 13
        versionName "3.1.3"
        multiDexEnabled true
        ndk {
            abiFilters 'armeabi','x86'
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ moduleName : project.getName() ]
            }
        }
        lintOptions {
            checkReleaseBuilds false
            // Or, if you prefer, you can continue to check for errors in release builds,
            // but continue the build even when errors are found:
            abortOnError false
        }
        productFlavors {
            dev {
                // Enable pre-dexing to produce an APK that can be tested on
                // Android 5.0+ without the time-consuming DEX build processes.
                minSdkVersion 21
            }
            common {
                minSdkVersion 19
            }
        }

        freeline {
            hack true
            productFlavor 'dev'
        }
    }

    dataBinding {
        enabled true
    }

    signingConfigs {
        release {
            try {
                storeFile file(pro.getProperty("jksPath"))
                storePassword pro.getProperty("storePassword")
                keyAlias pro.getProperty("keyAlias")
                keyPassword pro.getProperty("storePassword")
            } catch (ex) {
//                throw new InvalidUserDataException(ex.toString())
                ex.printStackTrace()
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //module
    compile 'com.twt.service:mvvmkit:1.2.0'
//    compile project(':navigationbottom')
//    compile project(':fragmentation')
    compile 'com.twt.service:fragmentation:1.1.0'
//    compile project(':commons')
    compile 'com.twt.service:commons:1.2.0'

//    compile project(':gpa')
    compile 'com.twt.service:gpa:1.1.0'
//    compile project(':bike')
    compile 'com.twt.service:bike:1.1.0'
//    compile project(':schedule')
    compile 'com.twt.service:schedule:1.0.0'
//    compile project(':one')
    compile 'com.twt.service:one:1.0.0'
//    compile project(':tjulibrary')
    compile 'com.twt.service:tjulibrary:1.1.0'
//    compile project(':classroomcore')
    compile 'com.twt.service:classroomcore:1.0.0'
//    compile project(':news')
    compile 'com.twt.service:news:1.1.0'
//    compile project(':auth')
    compile 'com.twt.service:auth:1.1.0'
//    compile project(':fellowsearch')
    compile 'com.twt.service:fellowsearch:1.0.0'
//    compile project(':yellowpages')
    compile 'com.twt.service:yellowpages:1.0.0'
//    compile project(':party')
    compile 'com.twt.service:party:1.0.0'
//    compile project(":classroomquery")
    compile 'com.twt.service:classroomquery:1.0.0'
//    compile project(':classroom')
    compile 'com.twt.service:classroom:1.0.1'

    compile project(':lostfound')
//    compile 'com.twt.service:lostfound:1.0.1'

//    compile project(':network')
    compile 'com.twt.service:network:1.1.1'


//    compile 'com.twtstudio.retrox:commons:1.0.1'
//    compile 'com.twtstudio.retrox:mvvmkit:1.0.0-SNAPSHOT'
//    compile 'com.twtstudio.retrox:party:1.0.0-SNAPSHOT'
//    compile 'com.twtstudio.retrox:auth:1.0.0-SNAPSHOT'
//    compile 'com.twtstudio.retrox:classroomcore:1.0.0-SNAPSHOT'
//    compile 'com.twtstudio.retrox:fragmentation:1.0.0-SNAPSHOT'
//    compile 'com.twtstudio.retrox:bike:1.0.0-SNAPSHOT'
//    compile 'com.twtstudio.retrox:gpa:1.0.1'
//    compile 'com.twtstudio.retrox:schedule:1.0.0-SNAPSHOT'
//    compile 'com.twtstudio.retrox:one:1.0.0-SNAPSHOT'
//    compile 'com.twtstudio.retrox:tjulibrary:1.0.0-SNAPSHOT'
//    compile 'com.twtstudio.retrox:news:1.0.0-SNAPSHOT'
//    compile 'com.twtstudio.retrox:fellowsearch:1.0.0-SNAPSHOT'
//    compile 'com.twtstudio.retrox:yellowpages:1.0.1-SNAPSHOT'
//    compile 'com.twtstudio.retrox:classroomquery:1.0.0-SNAPSHOT'


    compile 'com.wanjian:cockroach:0.0.5'

    compile 'com.jakewharton:butterknife:8.5.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'

    annotationProcessor 'com.alibaba:arouter-compiler:1.1.2'

//    compile 'us.feras.mdv:markdownview:1.1.0'
    compile 'com.github.mukeshsolanki:MarkdownView-Android:1.0.3'


    compile 'com.android.support:multidex:1.0.1'
    compile 'agency.tango.android:material-intro-screen:0.0.5'
    compile 'com.github.shem8:material-login:2.1.1'
    compile 'de.hdodenhof:circleimageview:2.1.0'

}

public class BuildTimeListener implements TaskExecutionListener,BuildListener{

    private Clock clock
    private times = []

    @Override
    void buildStarted(Gradle gradle) {

    }

    @Override
    void settingsEvaluated(Settings settings) {

    }

    @Override
    void projectsLoaded(Gradle gradle) {

    }

    @Override
    void projectsEvaluated(Gradle gradle) {

    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task spend time:"
        for (time in times) {
            if (time[0] >= 50) {
                printf "%7sms  %s\n", time
            }
        }
    }

    @Override
    void beforeExecute(Task task) {
        clock = new Clock()
    }

    @Override
    void afterExecute(Task task, TaskState state) {
        def ms = clock.timeInMs
        times.add([ms,task.path])
    }
}

project.gradle.addListener(new BuildTimeListener())